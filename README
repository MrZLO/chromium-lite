 Chromium-lite build system (by Tarnyko <tarnyko@tarnyko.net>)
 **************************

An attempt to cut down Chromium, and make it more comprehensive,
by doing the following :

- extracting Linux-only sources (removing MacOS, Win32, Android...
                                 source files);
- linking with system libraries (system libnss instead of local
                                 Google BoringSSL e.g.);
- configuring with CMake instead of Gyp ;
- compiling with GCC instead of Clang/LLVM ;
- disabling unneeded optimizations ;
- making debugging easier.


 How to clone the source :
 -----------------------
To grab the whole Chromium source I am using (it is around 12 GB,
thus schedule accordingly) :

$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
$ export PATH="$PWD/depot_tools:$PATH"
$ gclient config https://github.com/Tarnyko/chromium-lite.git --name=chromium-lite --deps-file DEPS
$ gclient sync --nohooks

 How to build :
 ------------
 Relatively to the cloning root tree, here is the root folder of each package :
01a-base) base
01b-skia) third_party/skia
01c-v8) v8
02a-url) url
02b-crypto) crypto
02c-ipc) ipc
02d-sdch) sdcp
02e-gpu_command_buffer) gpu/command_buffer
03a-net) net
03d-ui) ui/gfx
04a-ozone) ozone
04d-ui_events) ui/events
05a-media) media
05b-ui_base) ui/base
06b-ui_gl) ui/gl
07b-gpu) gpu
08a-cc) cc
09a-blink) third_party/WebKit/Source

 For each "recipe", please copy it this folder the "CMakeList.txt" file, and any .cmake and .patch file present.
 Then, move to it, and apply the patches with :
$ patch -p0 < <patchfile>
 Finally, build the package :
$ mkdir my_build ; cd my_build
$ cmake ..
 (for Skia :
$ cmake .. -DBACKEND=GLX -DCMAKE_TOOLCHAIN_FILE=../Toolchain-x86_64.cmake
 for others :
$ cmake .. -DBACKEND=X11 -DCMAKE_TOOLCHAIN_FILE=../Toolchain-x86_64.cmake
)


 Packages :
 --------

01a) base

 General-purpose toolkit (somewhat equivalent to GNOME GLib or QtCore).
 * Depends on : libevent, libicui18n
 * Handles : logging, callbacks, string and numeral conversions,
             command line arguments, file and directory operations,
             message loops, threads, time and date...
 * Notes : the full "base::i18n" subclass requires a fork of libicui
           in "third_party/icu"; to avoid this, we patch 1 file and use
           the forked headers for the other one ("net" requires it).

01b) skia

 Low-level drawing API (somewhat equivalent to Cairo or EFL Evas).
 * Depends on :
   - libjpeg-turbo, libpng12, libgif, libwebp (image formats)
   - freetype, fontconfig (font drawing)
   - egl, glesv2 (wayland) / gl, glu, x11 (x11) / osmesa (software)
 * Handles : basic drawing, text drawing, image formats conversion,
             GL acceleration and shaders.
 * Notes : upstream Skia is in "third_party/skia", but Chromium needs
           additional source files in "skia/ext", and also specific
           macros (look for "Chromium-specific" in CMakeLists.txt)

01c) v8

 V8 JavaScript Engine (somewhat equivalent to Mozilla Spidermonkey).
 * Depends on :
   - libicui18n
   - python (for building only)
 * Handles : JavaScript parsing, compilation and optimization.

02a) url

 URL parsing.
 * Depends on : base, libicuuc
 * Handles : recognition of URLs validity/protocol/scheme/content.

02b) crypto

 Cryptographic helper library.
 * Depends on : base, libnss
 * Handles : hashing, certificate creation and validation,
             randomization, encryption.
 * Notes : there are 2 implementations : NSS and OpenSSL.
           The OpenSSL one, despite its name, only works with
           Google-forked BoringSSL, thus we use NSS instead.

02c) ipc

 IPC helper library.
 * Depends on : base
 * Handles : socket-based message passing.

02d) sdch

 SDCH library.
 * Depends on : base
 * Handles : SDCH is Google's implementation of the VCDIFF
             format, based on open-vcdiff, and used for
             delta encoding in HTTP communications.

02e) gpu_command_buffer

 GPU command helper library.
 * Depends on : base
 * Handles : small utility functions to get/set GL properties,
             group GL commands and mark them...
 * Notes : we can not rely on system Mesa to build it, because
           it uses Chromium-specific GL headers definitions.

03a) net

 Net helper library.
 * Depends on :
   - base, url, crypto, sdch, protobuf, libnss, libnspr
   - python, protobuf-compiler (for building only)
 * Handles : this huge library is at the core of Chromium's
             recognition of various protocols (HTTP://, FTP://,
             FILE://, SPDY, HTTP/2, WebSockets...) and also serves
             as a toolkit for various browser-oriented mechanisms
             such as cache and cookies management, DNS resolving,
             proxy settings, SSL certificate recognition...
 * Notes : cryptographic code, when it does not depend on crypto
           (see above) has 2 implementations : NSS and OpenSSL.
           OpenSSL, despite its name, requires Google BoringSSL,
           thus we use NSS. Though, it requires non-upstream
           features such as "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305"
           (see https://bugzilla.mozilla.org/show_bug.cgi?id=917571),
           thus we patch a few sources to remove it - and also
           include forked headers from "third_party/nss".

03d) ui_gfx

 UI Gfx helper library.
 * Depends on :
   - base, skia, ipc, libjpeg-turbo, harfbuzz
   - x11, xi (x11)
   - python (for building only)
 * Handles : intermediate drawing helper API between Views toolkit
             (see below) and Skia. Can easily convert to PNG/JPEG,
             draw text, set bounds...

04a) ozone

 Ozone library.
 * Depends on : base, skia, ui_gfx, wayland-client, wayland-cursor,
                wayland-egl, egl, xkbcommon
 * Handles : Ozone is an alternative backend to X11 under Linux ;
             we only build its Wayland implementation, though a
             DRM implementation (for ChromeOS ?) exists somewhere.
             You have no reason to compile Ozone under X11.

04c) ui_accessibility

 UI Accessibility helper library.
 * Depends on :
   - base, ui_gfx, gconf, atk
   - python (for building only)

04d) ui_events

 UI Events helper library.
 * Depends on :
   - base, skia, ipc, ui_gfx, xkbcommon
   - libudev (wayland) / x11, xi, xproto (x11)
 * Handles : hardware detection, keyboard events, motion and gesture
             detection. Basically, this library uses platform-specific
             APIs (XInput under X11, UDev under Ozone/Wayland) to
             handle keyboard, mouse, touch... events.
 * Notes : the Ozone implementation may also support "evdev", but this
           seems to be required only by the higher-level Ozone DRM
           backend, which we do not build (see above).

05a) media

 Media library.
 * Depends on :
   - base, skia, url, crypto, gpu_command_buffer, ui_gfx, ui_events
   - yasm (for building on x86/x86_64 only)
   - alsa, opus
   - ozone (wayland) / x11, xdamage, xext, xfixes, xtst (x11)
 * Handles :
 * Notes : "libwebm" and "libyuv" are supposed to be dependecies,
           but libwebm .RPM/.DEB packages are nowhere to be found,
           and required libyuv is pretty different from the version
           found publicly. We are thus putting "third_party/libwebm"
           and "third_party/libyuv" code directly in the binary.

05b) ui_base

 UI Base helper library.
 * Depends on :
   - base, skia, url, net, ui_gfx, ui_events, ui_strings, ui_resources

06b) ui_gl

 UI GL helper library.
 * Depends on :
   - base, skia, gpu_command_buffer, ui_gfx, ui_base
 * Handles : various OpenGL utility functions.

07b) gpu

 GPU library.
 * Depends on :
   - base, crypto, ipc, gpu_command_buffer, ui_gfx, ui_gl
   - python, protobuf-compiler (for building only)
 * Handles : code for Chromium's "GPU process" lives there ; it is
             responsible for detecting GPU OpenGL capabilities,
             initializing the GL renderer and fallbacking to the
             software renderer if necessary, and starting the
             dedicated GPU Zygote process.

08a) cc

 CC library:
 * Depends on :
   - base, skia, ui_gfx, ui_events, media, ui_gl, gpu
   - protobuf
   - python, protobuf-compiler (for building only)
 * Handles : code for Chromium's "Renderer process" lives there ;
             it is the last abstraction layer between drawing
             libraries (from above : UI Views, UI Gfx, Skia) and
             the GPU process above which will do the real drawing.
             It starts the dedicated Renderer Zygote process.

09a) blink

 Blink Web Engine, Google's fork of WebKit.
 * Depends on :
   - base, skia, v8, url, ui_gfx, gpu, cc
   - libicui18n>=52, libicuuc>=52, harfbuzz
   - python, gperf (for building only)
 * Handles : Web rendering.
 * Notes : hard-to-find third-parties such as QCMS (fork of
           Mozilla TinyCMS) and OTS (security layer for TrueType
           fonts decoding) are included directly inside the binary.

09b) ui_compositor

 UI Compositor helper library.
 * Depends on : base, skia, ui_gfx, ui_gl, gpu, cc
